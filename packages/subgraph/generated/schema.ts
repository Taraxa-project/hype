// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal,
} from '@graphprotocol/graph-ts';

export class HypePool extends Entity {
  constructor(id: string) {
    super();
    this.set('id', Value.fromString(id));
    this.set('creator', Value.fromBytes(Bytes.empty()));
    this.set('title', Value.fromString(''));
    this.set('projectName', Value.fromString(''));
    this.set('description', Value.fromString(''));
    this.set('uri', Value.fromString(''));
    this.set('active', Value.fromBoolean(false));
    this.set('cap', Value.fromBigInt(BigInt.zero()));
    this.set('token', Value.fromBytes(Bytes.empty()));
    this.set('minReward', Value.fromBigInt(BigInt.zero()));
    this.set('endDate', Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get('id');
    assert(id != null, 'Cannot save HypePool entity without an ID');
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type HypePool must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set('HypePool', id.toString(), this);
    }
  }

  static load(id: string): HypePool | null {
    return changetype<HypePool | null>(store.get('HypePool', id));
  }

  get id(): string {
    let value = this.get('id');
    return value!.toString();
  }

  set id(value: string) {
    this.set('id', Value.fromString(value));
  }

  get creator(): Bytes | null {
    let value = this.get('creator');
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set creator(value: Bytes | null) {
    if (!value) {
      this.unset('creator');
    } else {
      this.set('creator', Value.fromBytes(<Bytes>value));
    }
  }

  get projectName(): string | null {
    let value = this.get('projectName');
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set projectName(value: string | null) {
    if (!value) {
      this.unset('projectName');
    } else {
      this.set('projectName', Value.fromString(<string>value));
    }
  }

  get description(): string | null {
    let value = this.get('description');
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value!.toString();
    }
  }

  set description(value: string | null) {
    if (!value) {
      this.unset('description');
    } else {
      this.set('description', Value.fromString(<string>value));
    }
  }

  get uri(): string | null {
    let value = this.get('uri');
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set uri(value: string | null) {
    if (!value) {
      this.unset('uri');
    } else {
      this.set('uri', Value.fromString(<string>value));
    }
  }

  get title(): string | null {
    let value = this.get('title');
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set title(value: string | null) {
    if (!value) {
      this.unset('title');
    } else {
      this.set('title', Value.fromString(<string>value));
    }
  }

  get active(): boolean {
    let value = this.get('active');
    return value!.toBoolean();
  }

  set active(value: boolean) {
    this.set('active', Value.fromBoolean(value));
  }

  get cap(): BigInt | null {
    let value = this.get('cap');
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set cap(value: BigInt | null) {
    if (!value) {
      this.unset('cap');
    } else {
      this.set('cap', Value.fromBigInt(<BigInt>value));
    }
  }

  get token(): Bytes | null {
    let value = this.get('token');
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set token(value: Bytes | null) {
    if (!value) {
      this.unset('token');
    } else {
      this.set('token', Value.fromBytes(<Bytes>value));
    }
  }

  get minReward(): BigInt | null {
    let value = this.get('minReward');
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set minReward(value: BigInt | null) {
    if (!value) {
      this.unset('minReward');
    } else {
      this.set('minReward', Value.fromBigInt(<BigInt>value));
    }
  }

  get endDate(): BigInt | null {
    let value = this.get('endDate');
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set endDate(value: BigInt | null) {
    if (!value) {
      this.unset('endDate');
    } else {
      this.set('endDate', Value.fromBigInt(<BigInt>value));
    }
  }
}

export class HypeUri extends Entity {
  constructor(id: string) {
    super();
    this.set('id', Value.fromString(id));
  }

  save(): void {
    let id = this.get('id');
    assert(id != null, 'Cannot save HypeUri entity without an ID');
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type HypeUri must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set('HypeUri', id.toString(), this);
    }
  }

  static load(id: string): HypeUri | null {
    return changetype<HypeUri | null>(store.get('HypeUri', id));
  }

  get id(): string {
    let value = this.get('id');
    return value!.toString();
  }

  set id(value: string) {
    this.set('id', Value.fromString(value));
  }

  get uri(): string | null {
    let value = this.get('uri');
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set uri(value: string | null) {
    if (!value) {
      this.unset('uri');
    } else {
      this.set('uri', Value.fromString(<string>value));
    }
  }
}

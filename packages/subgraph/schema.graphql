type _Schema_
  @fulltext(
    name: "poolSearch"
    language: en
    algorithm: rank
    include: [
      {
        entity: "HypePool"
        fields: [
          { name: "projectName" }
          { name: "title" }
          { name: "description" }
          { name: "projectDescription" }
          { name: "tokenName" }
          { name: "campaignWord" }
        ]
      }
    ]
  )

type Details @entity(immutable: true) {
  id: String!
}

type Rewards @entity(immutable: true) {
  id: String!
}

type HypePool @entity(immutable: false) {
  id: Bytes!
  creator: Bytes!
  uri: String!
  title: String
  projectName: String
  tokenName: String
  campaignWord: String
  description: String
  projectDescription: String
  network: BigInt
  tokenAddress: Bytes
  impressionReward: BigInt
  cap: BigInt
  remainingFunds: BigInt!
  startDate: BigInt
  duration: BigInt
  endDate: BigInt
  imageUri: String
  status: String
  leaderRewards: [BigInt!]
}

type HypeUri @entity(immutable: true) {
  id: Bytes!
  uri: String!
}

type DepositedEvent @entity(immutable: true) {
  id: ID!
  weiAmount: BigInt!
  spender: Bytes!
  poolId: Bytes!
}

type WithdrawnEvent @entity(immutable: true) {
  id: ID!
  weiAmount: BigInt!
  receiver: Bytes!
  poolId: Bytes!
}

type ClaimedEvent @entity(immutable: true) {
  id: ID!
  weiAmount: BigInt!
  receiver: Bytes!
  poolId: Bytes!
}

type RewardCreditedEvent @entity(immutable: true) {
  id: ID!
  weiAmount: BigInt!
  receiver: Bytes!
  poolId: Bytes!
}

type HypeIds @entity(immutable: false) {
  id: ID!
  ids: [Bytes!]!
}
